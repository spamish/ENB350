/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== uartecho.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var Task = xdc.useModule('ti.sysbios.knl.Task');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');
var ti_sysbios_hal_Seconds = xdc.useModule('ti.sysbios.hal.Seconds');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');


/*
 *  Program.stack is ignored with IAR. Use the project options in
 *  IAR Embedded Workbench to alter the system stack size.
 */
if (!Program.build.target.$name.match(/iar/)) {
    /*
     *  Reducing the system stack size (used by ISRs and Swis) to reduce
     *  RAM usage.
     */
    Program.stack = 0x300;
}

/*
 * Comment this line to allow module names to be loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 2;

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
System.SupportProxy = SysMin;
SysMin.bufSize = 128;

/* Enable Semihosting for GNU targets to print to CCS console */
if (Program.build.target.$name.match(/gnu/)) {
    var SemiHost = xdc.useModule('ti.sysbios.rts.gnu.SemiHostSupport');
}

/* ================ BIOS configuration ================ */
/*
 * Disable unused BIOS features to minimize footprint.
 * This example uses Tasks but not Swis or Clocks.
 */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.swiEnabled = false;
BIOS.logsEnabled = false;
BIOS.assertsEnabled = false;

/* No memory allocation occurs, so no heap is needed */
BIOS.heapSize = 0x2000;

/* No runtime stack checking is performed */
Task.checkStackFlag = true;
Hwi.checkStackFlag = true;

/* Reduce the number of task priorities */
Task.numPriorities = 4;

/* Remove the Idle Task */
Task.enableIdleTask = false;

/* ================ Task configuration ================ */
var task1Params = new Task.Params();
task1Params.instance.name = "LCD"; 
task1Params.stackSize = 0x800;
task1Params.priority = 1;
Program.global.LCD = Task.create("&_task_LCD", task1Params);

var task2Params = new Task.Params();
task2Params.instance.name = "FESTO"; 
task2Params.stackSize = 0x300;
task2Params.priority = 2;
Program.global.FESTO = Task.create("&_task_FESTO", task2Params);

var task3Params = new Task.Params();
task2Params.instance.name = "ADC"; 
task2Params.stackSize = 0x300;
task2Params.priority = 3;
Program.global.ADC = Task.create("&_task_ADC", task3Params);

/* ================ Logging configuration ================ */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');
LoggingSetup.loadLoggerSize = 256;
LoggingSetup.mainLoggerSize = 512;
LoggingSetup.sysbiosLoggerSize = 1024;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useGPIO = true;
TIRTOS.useUART = true;
Semaphore.supportsEvents = true;
Hwi.dispatcherSwiSupport = false;

/* ================ Events configuration ================ */
var event0Params = new Event.Params();
event0Params.instance.name = "FestoEvents";
Program.global.FestoEvents = Event.create(event0Params);

var event1Params = new Event.Params();
event1Params.instance.name = "DisplayEvents";
Program.global.DisplayEvents = Event.create(event1Params);

/* ================ Mailbox configuration ================ */
var mailbox0Params = new Mailbox.Params();
mailbox0Params.instance.name = "DisplayMailbox";
mailbox0Params.readerEvent = Program.global.DisplayEvents;
Program.global.DisplayMailbox = Mailbox.create(92, 5, mailbox0Params);

var mailbox1Params = new Mailbox.Params();
mailbox1Params.instance.name = "ADCMailbox";
mailbox1Params.readerEvent = Program.global.FestoEvents;
mailbox1Params.readerEventId = 64;
Program.global.ADCMailbox = Mailbox.create(4, 4, mailbox1Params);

Clock.timerId = 3;
var clock0Params = new Clock.Params();
clock0Params.instance.name = "Clock_1_sec";
clock0Params.period = 1000;
clock0Params.startFlag = false;
Program.global.Clock_1_sec = Clock.create("&_clock_1_sec", 1000, clock0Params);

